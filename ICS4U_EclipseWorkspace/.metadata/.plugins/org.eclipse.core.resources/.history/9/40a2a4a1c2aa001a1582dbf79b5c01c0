import java.util.ArrayList;

import processing.core.*;

public class Main extends PApplet{
	
	public static int cols = 25, rows = 25;
	
	public boolean[] keys = new boolean[5]; // used later
	
	Node[][] grid = new Node[rows][cols];
	
	ArrayList<Node> openSet = new ArrayList<Node>();
	
	ArrayList<Node> closedSet = new ArrayList<Node>();
	
	Node Start, End, current;
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		PApplet.main("Main");
	}
	
	void generateGrid() {
		for(int i = 0; i < rows; i++) {
			for(int j = 0; j < cols; j++) {
				grid[i][j] = new Node(i, j, this);
			}
		}
	}
	
	void spawnGrid(int r, int g, int b) {
		for(int i = 0; i < rows; i++) {
			for(int j = 0; j < cols; j++) {
				grid[i][j].show(r, g, b);
			}
		}
	}
	
	public void settings() {
		size(900, 900);
		
	}
	
	public void AStar() {
		
	}
	
	
	
	
	public void setup() {
		background(255);
		generateGrid();
		spawnGrid(255,255,255);
		
		for(int i = 0; i < rows; i++) {
			for(int j = 0; j < cols; j++) {
				grid[i][j].addNeighbors(grid);
			}
		}
		
		Start = grid[0][0];
		End = grid[15][3];
		openSet.add(Start);
	}
	
	public void removeFromArray(ArrayList<Node> e, Node elt) {
		for(int i = e.size() - 1; i >= 0; i--) {
			if(e.get(i) == elt) {
				e.remove(i);
			}
		}
	}
	
	public double heuristic(Node a, Node b) {
		double d = dist(a.getI(), a.getJ(), b.getI(), b.getJ());
		return d;
	}
	
	@SuppressWarnings("static-access")
	public void draw() {
		try {
			if(openSet.size() > 0) {
				int winner = 0; // winning index, lowest f cost
				
				for(int i = 0; i < openSet.size(); i++) {
					if(openSet.get(i).get_fCost() < openSet.get(winner).get_fCost()) {
						winner = i;
					}
				}
				
				current = openSet.get(winner);
				
				
				if(openSet.get(winner) == End) {
					println("DONE!");
					noLoop();
				}
				removeFromArray(openSet, current);
				closedSet.add(current);
				
				for(int i = 0; i< current.neighbors.size(); i++) {
					Node neighbor = current.neighbors.get(i);
					
					if(!closedSet.contains(neighbor)) {
						double tempG = neighbor.get_gCost()+1;
						
						if(openSet.contains(neighbor)) {
							if(tempG < neighbor.get_gCost()) {
								neighbor.set_gCost(tempG);
							}
						}
						
						else {
							neighbor.set_gCost(tempG);
							openSet.add(neighbor);
						}
						
						neighbor.set_hCost(heuristic(neighbor, End));
						neighbor.set_hCost(neighbor.get_gCost()+neighbor.get_hCost());
						
						
					}
					
				}
			}
			
			else {
				
			}
			
			for(int i = 0; i < openSet.size(); i++) {
				openSet.get(i).show(0, 255, 0);
				
			}
			
			for(int i = 0; i < closedSet.size(); i++) {
				closedSet.get(i).show(255, 0, 0);	
			}
			
		}
		
		catch(Exception e) {
			
		}
		
	}
	
	public void mousePressed() {
		println("openSet: "+openSet.size()+" ClosedSet: "+closedSet.size());
	}
	
	
	public void keyPressed() {
		
	}
	
	public void keyReleased() {
		
	}
}
